"""
______________________________________________________________
URL 경로, 쿼리 파라미터, request.data 비교

프론트엔드가 백엔드에게 데이터를 전달하는 방법은 크게 세 가지가 있다.

프론트엔드가 백엔드에게 get 메소드를 호출할 때는 쿼리 파라미터를 전달한다.
쿼리 파라미터 예시
# 예: /api/articles/?category=tech&page=2
category = request.GET.get('category')  # "tech"
page = request.GET.get('page')          # "2"

`URL 경로`, `쿼리 파라미터`, `request.data` 이 세 가지는 **프론트에서 백엔드로 데이터를 전달하는 방식이다.
---

 ✅ 세 가지 방식 비교표

| 항목                  | URL 경로 (`/posts/3/`)                                                           | 쿼리 파라미터 (`?user=1&page=2`)        | `request.data` (본문 데이터)                  |
| ------------------- | ------------------------------------------------------------------------------   | ---------------------------------- | -------------------------------------------- |
| 📌 사용 목적        | 리소스 식별 (누구/무엇)                                                                 | 조건 필터링, 검색, 페이징                | 리소스 생성/수정에 필요한 데이터 전송                 |
| 🎯 주 용도         | 어떤 리소스에 대해 요청하는가?                                                             | 어떤 조건으로 조회/필터할 것인가?          | 어떤 내용을 새로 생성/수정할 것인가?                  |
| 🧱 HTTP 메서드     | GET, PUT, DELETE 등에서 사용                                                           | 주로 GET                            | POST, PUT, PATCH                             |
| 💬 프론트 URL 형태   | `/users/42/posts/`                                                                 | `/posts/?user=42&page=2`           | Body에 `{ "title": "...", "content": "..." }` |
| 📥 Django 접근 방식 | `def get(self, request, user_id)`<br>`path('users/<int:user_id>/posts/', ...)`     | `request.query_params.get("page")`  | `request.data.get("title")`                  |
| 🔐 민감 정보        | URL에 보이면 위험                                                                      | URL에 보이면 위험                      | 상대적으로 안전 (본문에 담기므로)                    |
| 📎 공유/캐싱        | O (URL로 식별됨)                                                                      | O (검색 조건 공유 가능)                 | X (본문은 캐싱/공유 안 됨)                        |

---

🔍 상황별 예시

✅ 1. URL 경로 사용

```python
요청
GET /posts/3/

목적
id=3인 게시글을 조회

Django
path("posts/<int:pk>/", ...)
def get(self, request, pk): ...
```

---

✅ 2. 쿼리 파라미터 사용

```python
요청
GET /posts/?user_id=5&sort=recent

목적
user_id=5의 게시글을 최근순으로 조회

Django
user_id = request.query_params.get("user_id")
```

---

✅ 3. request.data 사용

```python
# 요청
POST /posts/
Body: {
  "title": "New Post",
  "content": "내용입니다"
}

목적
게시글 새로 만들기

Django
title = request.data.get("title")
```

---

✅ 언제 무엇을 써야 할까?

| 상황                        | 추천 방식          |
| ------------------------- | -------------- |
| 특정 리소스를 지정 (조회/수정/삭제) | `URL 경로`       |
| 리스트에서 검색/필터/정렬/페이징   | `쿼리 파라미터`      |
| 구조화된 데이터를 생성/수정      | `request.data` |

---

🔍 정리
요청 유형	  일반적인 사용 방식
GET	        URL + Query Parameters
POST	    Request Body (request.data)
PUT/PATCH	URL + Request Body
DELETE	    URL (때로는 Body도)

______________________________________________________________
"""

"""
______________________________________________________________
참조와 역참조 방법
class Author(models.Model):
    name = models.CharField(max_length=100)

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='books')

book = Book.objects.get(id=1)
author = book.author  # 참조

author = Author.objects.get(id=1)
books = author.books.all()  # related_name 사용 (역참조)

# related_name='books'가 없으면 기본값은 book_set이다.
______________________________________________________________
"""